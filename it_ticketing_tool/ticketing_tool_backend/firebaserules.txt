rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get the current user's UID
    function getUserId() {
      return request.auth.uid;
    }

    // Rules for the 'tickets' collection
    match /tickets/{ticketId} {
      // Allow authenticated users to read tickets
      // A user can read their own ticket (if reporter_id matches)
      // OR a support user can read any ticket (requires an 'isSupport' check, assumed true for now or based on a 'roles' collection lookup if you implement one)
      allow read: if isAuthenticated() && (
        resource.data.reporter_id == getUserId() ||
        exists(/databases/$(database)/documents/users/$(getUserId())) && get(/databases/$(database)/documents/users/$(getUserId())).data.role == 'support'
      );

      // Allow authenticated users to create tickets
      // The reporter_id must be set to the authenticated user's UID
      allow create: if isAuthenticated() &&
        request.resource.data.reporter_id == getUserId();

      // Allow authenticated users to update tickets
      // Users can only update their own tickets OR support users can update any ticket
      // Ensure specific fields are mutable as needed
      allow update: if isAuthenticated() && (
        resource.data.reporter_id == getUserId() || // Reporter can update their own ticket
        (exists(/databases/$(database)/documents/users/$(getUserId())) && get(/databases/$(database)/documents/users/$(getUserId())).data.role == 'support') // Support can update any ticket
      );

      // Deny delete by default, adjust if deletion functionality is needed
      allow delete: if false;

      // Rules for 'comments' subcollection within a ticket
      match /tickets/{ticketId}/comments/{commentId} {
        // Allow authenticated users to create comments on any ticket they can read
        // The commenter_id should be set by the server-side code based on the authenticated user.
        // We'll rely on the server-side API to enforce who can add comments (e.g., only authenticated users)
        allow create: if isAuthenticated();

        // Allow authenticated users to read comments on tickets they can read
        allow read: if isAuthenticated() && (
          get(/databases/$(database)/documents/tickets/$(ticketId)).data.reporter_id == getUserId() ||
          (exists(/databases/$(database)/documents/users/$(getUserId())) && get(/databases/$(database)/documents/users/$(getUserId())).data.role == 'support')
        );

        // Deny update and delete for comments (comments are typically immutable)
        allow update, delete: if false;
      }
    }

    // Optional: Rules for a 'users' collection if you store user roles there
    match /users/{userId} {
      // Allow users to read their own profile data (e.g., roles)
      allow read: if isAuthenticated() && getUserId() == userId;
      // Deny write access, user profiles are usually managed by auth or admin SDK
      allow write: if false;
    }

    // Public artifacts (e.g., app-wide configurations if any)
    match /artifacts/{appId}/public/data/{document=**} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Private user data (if any)
    match /artifacts/{appId}/users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}